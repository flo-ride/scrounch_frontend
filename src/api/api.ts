/* tslint:disable */
/* eslint-disable */
/**
 * api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * Represents the request format for currency types in the API, enabling serialization and deserialization to/from lowercase strings.
 * @export
 * @enum {string}
 */

export const CurrencyRequest = {
    Euro: 'euro',
    Epicoin: 'epicoin'
} as const;

export type CurrencyRequest = typeof CurrencyRequest[keyof typeof CurrencyRequest];


/**
 * Represents the response format for currency types in the API, enabling serialization and deserialization to/from lowercase strings.
 * @export
 * @enum {string}
 */

export const CurrencyResponse = {
    Euro: 'euro',
    Epicoin: 'epicoin'
} as const;

export type CurrencyResponse = typeof CurrencyResponse[keyof typeof CurrencyResponse];


/**
 * Represents a request to editing an existing location, including necessary validation for name length and optional category.
 * @export
 * @interface EditLocationRequest
 */
export interface EditLocationRequest {
    /**
     * The category of the location, which may be optional.
     * @type {LocationCategoryRequest}
     * @memberof EditLocationRequest
     */
    'category'?: LocationCategoryRequest | null;
    /**
     * Optional field to disable or enable the product.
     * @type {boolean}
     * @memberof EditLocationRequest
     */
    'disabled'?: boolean | null;
    /**
     * The name of the location, subject to length validation.
     * @type {string}
     * @memberof EditLocationRequest
     */
    'name'?: string | null;
}


/**
 * Request structure for editing an existing product, allowing optional updates to fields.
 * @export
 * @interface EditProductRequest
 */
export interface EditProductRequest {
    /**
     * Optional price of the product, required to be positive if present.
     * @type {CurrencyRequest}
     * @memberof EditProductRequest
     */
    'currency'?: CurrencyRequest | null;
    /**
     * Optional field to disable or enable the product.
     * @type {boolean}
     * @memberof EditProductRequest
     */
    'disabled'?: boolean | null;
    /**
     * Optional image URL or path, which can also be set to `None`.
     * @type {string}
     * @memberof EditProductRequest
     */
    'image'?: string | null;
    /**
     * Optional maximum quantity per command with conversion and size limits.
     * @type {number}
     * @memberof EditProductRequest
     */
    'max_quantity_per_command'?: number | null;
    /**
     * Optional name of the product with length validation.
     * @type {string}
     * @memberof EditProductRequest
     */
    'name'?: string | null;
    /**
     * Optional price of the product, required to be positive if present.
     * @type {number}
     * @memberof EditProductRequest
     */
    'price'?: number | null;
    /**
     * Optional SMA code for product identification, can be `None` if specified.
     * @type {string}
     * @memberof EditProductRequest
     */
    'sma_code'?: string | null;
}


/**
 * Structure representing a request to edit an existing refill entry.
 * @export
 * @interface EditRefillRequest
 */
export interface EditRefillRequest {
    /**
     * Optional new amount for the refill.
     * @type {number}
     * @memberof EditRefillRequest
     */
    'credit'?: number | null;
    /**
     * Optional currency type for the new refill credit.
     * @type {CurrencyRequest}
     * @memberof EditRefillRequest
     */
    'credit_currency'?: CurrencyRequest | null;
    /**
     * Optional new disabled status for the refill.
     * @type {boolean}
     * @memberof EditRefillRequest
     */
    'disabled'?: boolean | null;
    /**
     * Optional new name for the refill.
     * @type {string}
     * @memberof EditRefillRequest
     */
    'name'?: string | null;
    /**
     * Optional new amount for the refill.
     * @type {number}
     * @memberof EditRefillRequest
     */
    'price'?: number | null;
    /**
     * Optional currency type for the new refill price.
     * @type {CurrencyRequest}
     * @memberof EditRefillRequest
     */
    'price_currency'?: CurrencyRequest | null;
}


/**
 * Represents an update request for user-specific fields, allowing modification of key boolean attributes such as `is_admin` and `is_banned`.
 * @export
 * @interface EditUserRequest
 */
export interface EditUserRequest {
    /**
     * Indicates whether the user has admin privileges.
     * @type {boolean}
     * @memberof EditUserRequest
     */
    'is_admin'?: boolean | null;
    /**
     * Indicates whether the user is banned from the system.
     * @type {boolean}
     * @memberof EditUserRequest
     */
    'is_banned'?: boolean | null;
}
/**
 * Response structure for edited product details.
 * @export
 * @interface EditedProductResponse
 */
export interface EditedProductResponse {
    /**
     * Optional flag indicating if the product is disabled.
     * @type {boolean}
     * @memberof EditedProductResponse
     */
    'disabled'?: boolean | null;
    /**
     * Unique identifier for the product.
     * @type {string}
     * @memberof EditedProductResponse
     */
    'id': string;
    /**
     * Optional image associated with the product.
     * @type {string}
     * @memberof EditedProductResponse
     */
    'image'?: string | null;
    /**
     * Optional maximum quantity allowed per command.
     * @type {number}
     * @memberof EditedProductResponse
     */
    'max_quantity_per_command'?: number | null;
    /**
     * Optional name of the product.
     * @type {string}
     * @memberof EditedProductResponse
     */
    'name'?: string | null;
    /**
     * Optional price of the product.
     * @type {number}
     * @memberof EditedProductResponse
     */
    'price'?: number | null;
    /**
     * Optional SMA code associated with the product.
     * @type {string}
     * @memberof EditedProductResponse
     */
    'sma_code'?: string | null;
}
/**
 * Represents a standardized error response returned by the API.  This struct is designed to provide structured error information to clients, including an HTTP status code, an error identifier, a category describing the error type, and a user-friendly error message.
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * A brief string identifying the type of error.
     * @type {string}
     * @memberof ErrorResponse
     */
    'error': string;
    /**
     * The category or kind of the error, often used to classify error types.
     * @type {string}
     * @memberof ErrorResponse
     */
    'kind': string;
    /**
     * A descriptive message providing additional details about the error.
     * @type {string}
     * @memberof ErrorResponse
     */
    'message': string;
    /**
     * The HTTP status code associated with the error.
     * @type {number}
     * @memberof ErrorResponse
     */
    'status': number;
}
/**
 * Enum representing the different types of files.  This enum is used to differentiate between various types of file. It is deserialized from lowercase string values.
 * @export
 * @enum {string}
 */

export const FileType = {
    Product: 'product'
} as const;

export type FileType = typeof FileType[keyof typeof FileType];


/**
 * Enum representing categories of locations, such as dispensers or rooms. This type is used for deserializing request payloads.
 * @export
 * @enum {string}
 */

export const LocationCategoryRequest = {
    Dispenser: 'dispenser',
    Room: 'room'
} as const;

export type LocationCategoryRequest = typeof LocationCategoryRequest[keyof typeof LocationCategoryRequest];


/**
 * Enum representing categories of locations, such as dispensers or rooms. This type is used for serializing request payloads and indicates the type of location being referred to in a response.
 * @export
 * @enum {string}
 */

export const LocationCategoryResponse = {
    Dispenser: 'dispenser',
    Room: 'room'
} as const;

export type LocationCategoryResponse = typeof LocationCategoryResponse[keyof typeof LocationCategoryResponse];


/**
 * Response structure representing a paginated list of locations.  This structure is intended for use in API responses where a paginated list of locations is required.
 * @export
 * @interface LocationListResponse
 */
export interface LocationListResponse {
    /**
     * The current page number in the paginated response.
     * @type {number}
     * @memberof LocationListResponse
     */
    'current_page': number;
    /**
     * A list of locations on the current page, represented by `LocationResponse`.
     * @type {Array<LocationResponse>}
     * @memberof LocationListResponse
     */
    'locations': Array<LocationResponse>;
    /**
     * The total number of pages available.
     * @type {number}
     * @memberof LocationListResponse
     */
    'total_page': number;
}
/**
 * Response structure representing a location entity, including its unique identifier, name, category, creation timestamp, and status.  This structure is used for API responses where individual location details are required.
 * @export
 * @interface LocationResponse
 */
export interface LocationResponse {
    /**
     * The category of the location, which could be `Dispenser` or `Room`.
     * @type {LocationCategoryResponse}
     * @memberof LocationResponse
     */
    'category'?: LocationCategoryResponse | null;
    /**
     * The timestamp indicating when the location was created.
     * @type {string}
     * @memberof LocationResponse
     */
    'created_at': string;
    /**
     * Indicates whether the location is disabled.
     * @type {boolean}
     * @memberof LocationResponse
     */
    'disabled': boolean;
    /**
     * Unique identifier of the location.
     * @type {string}
     * @memberof LocationResponse
     */
    'id': string;
    /**
     * The name of the location.
     * @type {string}
     * @memberof LocationResponse
     */
    'name': string;
}


/**
 * Represents a request to create a new location, including necessary validation for name length and optional category.
 * @export
 * @interface NewLocationRequest
 */
export interface NewLocationRequest {
    /**
     * The category of the location, which may be optional.
     * @type {LocationCategoryRequest}
     * @memberof NewLocationRequest
     */
    'category'?: LocationCategoryRequest | null;
    /**
     * The name of the location, subject to length validation.
     * @type {string}
     * @memberof NewLocationRequest
     */
    'name': string;
}


/**
 * Request structure for creating a new product, including validation rules.
 * @export
 * @interface NewProductRequest
 */
export interface NewProductRequest {
    /**
     * Currency of the product.
     * @type {CurrencyRequest}
     * @memberof NewProductRequest
     */
    'currency': CurrencyRequest;
    /**
     * Optional image URL or path.
     * @type {string}
     * @memberof NewProductRequest
     */
    'image'?: string | null;
    /**
     * Optional maximum quantity per command, limited to a certain maximum.
     * @type {number}
     * @memberof NewProductRequest
     */
    'max_quantity_per_command'?: number | null;
    /**
     * Name of the product, required and validated for length.
     * @type {string}
     * @memberof NewProductRequest
     */
    'name': string;
    /**
     * Price of the product, required and must be positive.
     * @type {number}
     * @memberof NewProductRequest
     */
    'price': number;
    /**
     * Optional SMA code for product identification.
     * @type {string}
     * @memberof NewProductRequest
     */
    'sma_code'?: string | null;
}


/**
 * Request structure for creating a new refill, including validation rules.
 * @export
 * @interface NewRefillRequest
 */
export interface NewRefillRequest {
    /**
     * Amount given with refill
     * @type {number}
     * @memberof NewRefillRequest
     */
    'credit': number;
    /**
     * Currency type for the refill credit.
     * @type {CurrencyRequest}
     * @memberof NewRefillRequest
     */
    'credit_currency': CurrencyRequest;
    /**
     * Name of the refill, required and validated for length.
     * @type {string}
     * @memberof NewRefillRequest
     */
    'name'?: string | null;
    /**
     * Amount for buying refill
     * @type {number}
     * @memberof NewRefillRequest
     */
    'price': number;
    /**
     * Currency type for the refill price.
     * @type {CurrencyRequest}
     * @memberof NewRefillRequest
     */
    'price_currency': CurrencyRequest;
}


/**
 * Response structure for a list of products with pagination details.
 * @export
 * @interface ProductListResponse
 */
export interface ProductListResponse {
    /**
     * Current page number.
     * @type {number}
     * @memberof ProductListResponse
     */
    'current_page': number;
    /**
     * List of products on the current page.
     * @type {Array<ProductResponse>}
     * @memberof ProductListResponse
     */
    'products': Array<ProductResponse>;
    /**
     * Total number of pages available.
     * @type {number}
     * @memberof ProductListResponse
     */
    'total_page': number;
}
/**
 * Response structure for a product, including its details.
 * @export
 * @interface ProductResponse
 */
export interface ProductResponse {
    /**
     * Creation timestamp of the product.
     * @type {string}
     * @memberof ProductResponse
     */
    'created_at': string;
    /**
     * Currency of the product price.
     * @type {CurrencyResponse}
     * @memberof ProductResponse
     */
    'currency': CurrencyResponse;
    /**
     * Optional flag indicating if the product is disabled.
     * @type {boolean}
     * @memberof ProductResponse
     */
    'disabled'?: boolean | null;
    /**
     * Unique identifier for the product.
     * @type {string}
     * @memberof ProductResponse
     */
    'id': string;
    /**
     * Optional image associated with the product.
     * @type {string}
     * @memberof ProductResponse
     */
    'image'?: string | null;
    /**
     * Optional maximum quantity allowed per command.
     * @type {number}
     * @memberof ProductResponse
     */
    'max_quantity_per_command'?: number | null;
    /**
     * Name of the product.
     * @type {string}
     * @memberof ProductResponse
     */
    'name': string;
    /**
     * Price of the product.
     * @type {number}
     * @memberof ProductResponse
     */
    'price': number;
    /**
     * Optional SMA code associated with the product.
     * @type {string}
     * @memberof ProductResponse
     */
    'sma_code'?: string | null;
}


/**
 * Represents a response containing a list of refills returned by the API.
 * @export
 * @interface RefillListResponse
 */
export interface RefillListResponse {
    /**
     * The current page number being viewed.
     * @type {number}
     * @memberof RefillListResponse
     */
    'current_page': number;
    /**
     * A list of refill responses containing refill details.
     * @type {Array<RefillResponse>}
     * @memberof RefillListResponse
     */
    'refills': Array<RefillResponse>;
    /**
     * The total number of pages available for refill results.
     * @type {number}
     * @memberof RefillListResponse
     */
    'total_page': number;
}
/**
 * Represents a response containing refill information returned by the API.
 * @export
 * @interface RefillResponse
 */
export interface RefillResponse {
    /**
     * The timestamp indicating when the refill was created.
     * @type {string}
     * @memberof RefillResponse
     */
    'created_at': string;
    /**
     * Credit of the refill.
     * @type {number}
     * @memberof RefillResponse
     */
    'credit': number;
    /**
     * Currency type for the refill credit.
     * @type {CurrencyResponse}
     * @memberof RefillResponse
     */
    'credit_currency': CurrencyResponse;
    /**
     * Indicates whether the refill is currently disabled.
     * @type {boolean}
     * @memberof RefillResponse
     */
    'disabled': boolean;
    /**
     * Unique identifier for the refill.
     * @type {string}
     * @memberof RefillResponse
     */
    'id': string;
    /**
     * The full name of the refill.
     * @type {string}
     * @memberof RefillResponse
     */
    'name'?: string | null;
    /**
     * Price of the refill.
     * @type {number}
     * @memberof RefillResponse
     */
    'price': number;
    /**
     * Currency type for the refill price.
     * @type {CurrencyResponse}
     * @memberof RefillResponse
     */
    'price_currency': CurrencyResponse;
}


/**
 * Represents the response structure for synchronizing products with the SMA system, categorizing products based on their synchronization status. This structure is intended for use in API responses where the status of products in relation to the SMA system needs to be clearly distinguished.
 * @export
 * @interface SmaResponse
 */
export interface SmaResponse {
    /**
     * A list of products that were updated, represented by `EditedProductResponse`.
     * @type {Array<EditedProductResponse>}
     * @memberof SmaResponse
     */
    'changed': Array<EditedProductResponse>;
    /**
     * A list of newly created products, represented by `ProductResponse`.
     * @type {Array<ProductResponse>}
     * @memberof SmaResponse
     */
    'created': Array<ProductResponse>;
    /**
     * A list of product IDs that have not been modified during the synchronization process.
     * @type {Array<string>}
     * @memberof SmaResponse
     */
    'unchanged': Array<string>;
}
/**
 * Represents a response containing a list of users returned by the API.
 * @export
 * @interface UserListResponse
 */
export interface UserListResponse {
    /**
     * The current page number being viewed.
     * @type {number}
     * @memberof UserListResponse
     */
    'current_page': number;
    /**
     * The total number of pages available for user results.
     * @type {number}
     * @memberof UserListResponse
     */
    'total_page': number;
    /**
     * A list of user responses containing user details.
     * @type {Array<UserResponse>}
     * @memberof UserListResponse
     */
    'users': Array<UserResponse>;
}
/**
 * Represents a response containing user information returned by the API.
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * The timestamp of when the user was created.
     * @type {string}
     * @memberof UserResponse
     */
    'created_at': string;
    /**
     * The email address of the user.
     * @type {string}
     * @memberof UserResponse
     */
    'email'?: string | null;
    /**
     * Unique identifier for the user.
     * @type {string}
     * @memberof UserResponse
     */
    'id': string;
    /**
     * Indicates whether the user has admin privileges.
     * @type {boolean}
     * @memberof UserResponse
     */
    'is_admin': boolean;
    /**
     * Indicates whether the user is banned from the application.
     * @type {boolean}
     * @memberof UserResponse
     */
    'is_banned': boolean;
    /**
     * The timestamp of the user\'s last access.
     * @type {string}
     * @memberof UserResponse
     */
    'last_access_at': string;
    /**
     * The full name of the user.
     * @type {string}
     * @memberof UserResponse
     */
    'name'?: string | null;
    /**
     * The username chosen by the user.
     * @type {string}
     * @memberof UserResponse
     */
    'username'?: string | null;
}

/**
 * LocationApi - axios parameter creator
 * @export
 */
export const LocationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The location is not fully removed but marked as disabled in the database. Only an admin can perform this action.  - **Path Parameters:**   - `id`: The unique ID of the location in the database.  - **Responses:**   - `500`: Internal error, likely related to the database.   - `400`: The request format is invalid.   - `200`: The location has been successfully disabled.
         * @summary Deletes a location by its database ID.
         * @param {string} id Location database id to delete location for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLocation: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteLocation', 'id', id)
            const localVarPath = `/location/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication axum-oidc required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an error if the location doesn\'t exist, if there is a validation issue, or if a database.
         * @summary Edit an existing location by ID.
         * @param {string} id location database id to edit location for
         * @param {EditLocationRequest} editLocationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editLocation: async (id: string, editLocationRequest: EditLocationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('editLocation', 'id', id)
            // verify required parameter 'editLocationRequest' is not null or undefined
            assertParamExists('editLocation', 'editLocationRequest', editLocationRequest)
            const localVarPath = `/location/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication axum-oidc required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editLocationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * - **Query Parameters**:   - `page` (Optional, u64): The page index, default is 0.   - `per_page` (Optional, u64): The number of location per page, default is 20.  - **Response Codes**:   - `200 OK`: Successfully retrieved a list of locations.   - `400 Bad Request`: The request is improperly formatted.   - `500 Internal Server Error`: An internal error, most likely related to the database, occurred.  - **Permissions**:   Only Admin can view disabled location
         * @summary Handles the request to retrieve a paginated list of locations.
         * @param {number | null} [page] The page number to retrieve, starting from 1.
         * @param {number | null} [perPage] The number of items to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLocations: async (page?: number | null, perPage?: number | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/location`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication axum-oidc required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * - **Path Parameters**:   `id` (UUID): The database ID of the location to retrieve.  - **Response Codes**:   - `200 OK`: The location was successfully retrieved.   - `404 Not Found`: The location doesn\'t exist.   - `400 Bad Request`: The request is improperly formatted.   - `500 Internal Server Error`: An internal error, most likely related to the database, occurred.  - **Permissions**:   If the location is disabled, only an admin can retrieve it.
         * @summary Handles the request to fetch a location by its unique identifier.
         * @param {string} id The database ID of the location to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocation: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getLocation', 'id', id)
            const localVarPath = `/location/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication axum-oidc required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This function allows an admin to create a new location by sending a POST request to the `/location` endpoint. The new location is validated and stored in the database. The image associated with the location is checked in S3 storage.  - **Admin privileges** are required to access this route. - Returns a `201 Created` status upon successful creation along with the location\'s ID.  Path: `/location`  - **Request Body:** Expects a `NewLocation` JSON object. - **Responses:**     - 500: Internal server error (likely database related).     - 400: Bad request (invalid input data).     - 201: Successfully created a new location, returns the new location\'s ID as a string.
         * @summary Handler for creating a new location.
         * @param {NewLocationRequest} newLocationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNewLocation: async (newLocationRequest: NewLocationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'newLocationRequest' is not null or undefined
            assertParamExists('postNewLocation', 'newLocationRequest', newLocationRequest)
            const localVarPath = `/location`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication axum-oidc required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newLocationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocationApi - functional programming interface
 * @export
 */
export const LocationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LocationApiAxiosParamCreator(configuration)
    return {
        /**
         * The location is not fully removed but marked as disabled in the database. Only an admin can perform this action.  - **Path Parameters:**   - `id`: The unique ID of the location in the database.  - **Responses:**   - `500`: Internal error, likely related to the database.   - `400`: The request format is invalid.   - `200`: The location has been successfully disabled.
         * @summary Deletes a location by its database ID.
         * @param {string} id Location database id to delete location for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLocation(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLocation(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LocationApi.deleteLocation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns an error if the location doesn\'t exist, if there is a validation issue, or if a database.
         * @summary Edit an existing location by ID.
         * @param {string} id location database id to edit location for
         * @param {EditLocationRequest} editLocationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editLocation(id: string, editLocationRequest: EditLocationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editLocation(id, editLocationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LocationApi.editLocation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * - **Query Parameters**:   - `page` (Optional, u64): The page index, default is 0.   - `per_page` (Optional, u64): The number of location per page, default is 20.  - **Response Codes**:   - `200 OK`: Successfully retrieved a list of locations.   - `400 Bad Request`: The request is improperly formatted.   - `500 Internal Server Error`: An internal error, most likely related to the database, occurred.  - **Permissions**:   Only Admin can view disabled location
         * @summary Handles the request to retrieve a paginated list of locations.
         * @param {number | null} [page] The page number to retrieve, starting from 1.
         * @param {number | null} [perPage] The number of items to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllLocations(page?: number | null, perPage?: number | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocationListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllLocations(page, perPage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LocationApi.getAllLocations']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * - **Path Parameters**:   `id` (UUID): The database ID of the location to retrieve.  - **Response Codes**:   - `200 OK`: The location was successfully retrieved.   - `404 Not Found`: The location doesn\'t exist.   - `400 Bad Request`: The request is improperly formatted.   - `500 Internal Server Error`: An internal error, most likely related to the database, occurred.  - **Permissions**:   If the location is disabled, only an admin can retrieve it.
         * @summary Handles the request to fetch a location by its unique identifier.
         * @param {string} id The database ID of the location to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocation(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLocation(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LocationApi.getLocation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This function allows an admin to create a new location by sending a POST request to the `/location` endpoint. The new location is validated and stored in the database. The image associated with the location is checked in S3 storage.  - **Admin privileges** are required to access this route. - Returns a `201 Created` status upon successful creation along with the location\'s ID.  Path: `/location`  - **Request Body:** Expects a `NewLocation` JSON object. - **Responses:**     - 500: Internal server error (likely database related).     - 400: Bad request (invalid input data).     - 201: Successfully created a new location, returns the new location\'s ID as a string.
         * @summary Handler for creating a new location.
         * @param {NewLocationRequest} newLocationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postNewLocation(newLocationRequest: NewLocationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postNewLocation(newLocationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LocationApi.postNewLocation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LocationApi - factory interface
 * @export
 */
export const LocationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LocationApiFp(configuration)
    return {
        /**
         * The location is not fully removed but marked as disabled in the database. Only an admin can perform this action.  - **Path Parameters:**   - `id`: The unique ID of the location in the database.  - **Responses:**   - `500`: Internal error, likely related to the database.   - `400`: The request format is invalid.   - `200`: The location has been successfully disabled.
         * @summary Deletes a location by its database ID.
         * @param {string} id Location database id to delete location for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLocation(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteLocation(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an error if the location doesn\'t exist, if there is a validation issue, or if a database.
         * @summary Edit an existing location by ID.
         * @param {string} id location database id to edit location for
         * @param {EditLocationRequest} editLocationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editLocation(id: string, editLocationRequest: EditLocationRequest, options?: any): AxiosPromise<void> {
            return localVarFp.editLocation(id, editLocationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * - **Query Parameters**:   - `page` (Optional, u64): The page index, default is 0.   - `per_page` (Optional, u64): The number of location per page, default is 20.  - **Response Codes**:   - `200 OK`: Successfully retrieved a list of locations.   - `400 Bad Request`: The request is improperly formatted.   - `500 Internal Server Error`: An internal error, most likely related to the database, occurred.  - **Permissions**:   Only Admin can view disabled location
         * @summary Handles the request to retrieve a paginated list of locations.
         * @param {number | null} [page] The page number to retrieve, starting from 1.
         * @param {number | null} [perPage] The number of items to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLocations(page?: number | null, perPage?: number | null, options?: any): AxiosPromise<LocationListResponse> {
            return localVarFp.getAllLocations(page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * - **Path Parameters**:   `id` (UUID): The database ID of the location to retrieve.  - **Response Codes**:   - `200 OK`: The location was successfully retrieved.   - `404 Not Found`: The location doesn\'t exist.   - `400 Bad Request`: The request is improperly formatted.   - `500 Internal Server Error`: An internal error, most likely related to the database, occurred.  - **Permissions**:   If the location is disabled, only an admin can retrieve it.
         * @summary Handles the request to fetch a location by its unique identifier.
         * @param {string} id The database ID of the location to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocation(id: string, options?: any): AxiosPromise<LocationResponse> {
            return localVarFp.getLocation(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This function allows an admin to create a new location by sending a POST request to the `/location` endpoint. The new location is validated and stored in the database. The image associated with the location is checked in S3 storage.  - **Admin privileges** are required to access this route. - Returns a `201 Created` status upon successful creation along with the location\'s ID.  Path: `/location`  - **Request Body:** Expects a `NewLocation` JSON object. - **Responses:**     - 500: Internal server error (likely database related).     - 400: Bad request (invalid input data).     - 201: Successfully created a new location, returns the new location\'s ID as a string.
         * @summary Handler for creating a new location.
         * @param {NewLocationRequest} newLocationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNewLocation(newLocationRequest: NewLocationRequest, options?: any): AxiosPromise<string> {
            return localVarFp.postNewLocation(newLocationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LocationApi - object-oriented interface
 * @export
 * @class LocationApi
 * @extends {BaseAPI}
 */
export class LocationApi extends BaseAPI {
    /**
     * The location is not fully removed but marked as disabled in the database. Only an admin can perform this action.  - **Path Parameters:**   - `id`: The unique ID of the location in the database.  - **Responses:**   - `500`: Internal error, likely related to the database.   - `400`: The request format is invalid.   - `200`: The location has been successfully disabled.
     * @summary Deletes a location by its database ID.
     * @param {string} id Location database id to delete location for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public deleteLocation(id: string, options?: RawAxiosRequestConfig) {
        return LocationApiFp(this.configuration).deleteLocation(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns an error if the location doesn\'t exist, if there is a validation issue, or if a database.
     * @summary Edit an existing location by ID.
     * @param {string} id location database id to edit location for
     * @param {EditLocationRequest} editLocationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public editLocation(id: string, editLocationRequest: EditLocationRequest, options?: RawAxiosRequestConfig) {
        return LocationApiFp(this.configuration).editLocation(id, editLocationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * - **Query Parameters**:   - `page` (Optional, u64): The page index, default is 0.   - `per_page` (Optional, u64): The number of location per page, default is 20.  - **Response Codes**:   - `200 OK`: Successfully retrieved a list of locations.   - `400 Bad Request`: The request is improperly formatted.   - `500 Internal Server Error`: An internal error, most likely related to the database, occurred.  - **Permissions**:   Only Admin can view disabled location
     * @summary Handles the request to retrieve a paginated list of locations.
     * @param {number | null} [page] The page number to retrieve, starting from 1.
     * @param {number | null} [perPage] The number of items to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public getAllLocations(page?: number | null, perPage?: number | null, options?: RawAxiosRequestConfig) {
        return LocationApiFp(this.configuration).getAllLocations(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * - **Path Parameters**:   `id` (UUID): The database ID of the location to retrieve.  - **Response Codes**:   - `200 OK`: The location was successfully retrieved.   - `404 Not Found`: The location doesn\'t exist.   - `400 Bad Request`: The request is improperly formatted.   - `500 Internal Server Error`: An internal error, most likely related to the database, occurred.  - **Permissions**:   If the location is disabled, only an admin can retrieve it.
     * @summary Handles the request to fetch a location by its unique identifier.
     * @param {string} id The database ID of the location to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public getLocation(id: string, options?: RawAxiosRequestConfig) {
        return LocationApiFp(this.configuration).getLocation(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This function allows an admin to create a new location by sending a POST request to the `/location` endpoint. The new location is validated and stored in the database. The image associated with the location is checked in S3 storage.  - **Admin privileges** are required to access this route. - Returns a `201 Created` status upon successful creation along with the location\'s ID.  Path: `/location`  - **Request Body:** Expects a `NewLocation` JSON object. - **Responses:**     - 500: Internal server error (likely database related).     - 400: Bad request (invalid input data).     - 201: Successfully created a new location, returns the new location\'s ID as a string.
     * @summary Handler for creating a new location.
     * @param {NewLocationRequest} newLocationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public postNewLocation(newLocationRequest: NewLocationRequest, options?: RawAxiosRequestConfig) {
        return LocationApiFp(this.configuration).postNewLocation(newLocationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MiscApi - axios parameter creator
 * @export
 */
export const MiscApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This function retrieves a specified file based on the given filename and type, and streams it to the client. It also handles errors related to file access, returning appropriate HTTP status codes for various scenarios such as file not found or other errors.  # Parameters - `filename`: The name of the file to be downloaded. - `params`: The type of the file, which affects the download behavior.  # Responses - `200`: The file is correctly uploaded. - `400`: You\'re missing some field.  # Errors Returns an error if the file does not exist or if there is an issue with the S3 storage.
         * @summary Downloads files from the server\'s storage.
         * @param {string} filename The filename
         * @param {FileType} fileType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFile: async (filename: string, fileType: FileType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'filename' is not null or undefined
            assertParamExists('downloadFile', 'filename', filename)
            // verify required parameter 'fileType' is not null or undefined
            assertParamExists('downloadFile', 'fileType', fileType)
            const localVarPath = `/download/{filename}`
                .replace(`{${"filename"}}`, encodeURIComponent(String(filename)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fileType !== undefined) {
                localVarQueryParameter['file_type'] = fileType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This asynchronous function handles the `/status` endpoint and returns a static string indicating that the server is running. It is commonly used for health checks to confirm that the application is up and operational.  # Returns A static string `\"UP\"`, representing the server\'s status.  # Endpoint - **GET /status**: Responds with `\"UP\"` and a `200 OK` status.
         * @summary Returns the status of the server.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # Errors - Returns a 500 status code if there is an internal error, such as a failure to fetch or process Sma data. - Returns a 400 status code if the request to Sma is not correctly formatted.  # Responses - 200: The products have been successfully updated.
         * @summary Updates the local product database by importing products from the Sma API. This function retrieves the latest products from Sma, processes the data, and updates the local products accordingly.
         * @param {boolean} [name] Indicates if the product\&#39;s name has changed.
         * @param {boolean} [price] Indicates if the product\&#39;s price has changed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUpdateFromSma: async (name?: boolean, price?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sma`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication axum-oidc required

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (price !== undefined) {
                localVarQueryParameter['price'] = price;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows an admin user to upload files to a specified S3 bucket. It uses multipart form data to handle file uploads and stores them in a temporary S3 directory.
         * @summary Upload files
         * @param {FileType} fileType 
         * @param {File} file Represents the file data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUploadFiles: async (fileType: FileType, file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileType' is not null or undefined
            assertParamExists('postUploadFiles', 'fileType', fileType)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('postUploadFiles', 'file', file)
            const localVarPath = `/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication axum-oidc required

            if (fileType !== undefined) {
                localVarQueryParameter['file_type'] = fileType;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MiscApi - functional programming interface
 * @export
 */
export const MiscApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MiscApiAxiosParamCreator(configuration)
    return {
        /**
         * This function retrieves a specified file based on the given filename and type, and streams it to the client. It also handles errors related to file access, returning appropriate HTTP status codes for various scenarios such as file not found or other errors.  # Parameters - `filename`: The name of the file to be downloaded. - `params`: The type of the file, which affects the download behavior.  # Responses - `200`: The file is correctly uploaded. - `400`: You\'re missing some field.  # Errors Returns an error if the file does not exist or if there is an issue with the S3 storage.
         * @summary Downloads files from the server\'s storage.
         * @param {string} filename The filename
         * @param {FileType} fileType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadFile(filename: string, fileType: FileType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadFile(filename, fileType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MiscApi.downloadFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This asynchronous function handles the `/status` endpoint and returns a static string indicating that the server is running. It is commonly used for health checks to confirm that the application is up and operational.  # Returns A static string `\"UP\"`, representing the server\'s status.  # Endpoint - **GET /status**: Responds with `\"UP\"` and a `200 OK` status.
         * @summary Returns the status of the server.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStatus(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStatus(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MiscApi.getStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * # Errors - Returns a 500 status code if there is an internal error, such as a failure to fetch or process Sma data. - Returns a 400 status code if the request to Sma is not correctly formatted.  # Responses - 200: The products have been successfully updated.
         * @summary Updates the local product database by importing products from the Sma API. This function retrieves the latest products from Sma, processes the data, and updates the local products accordingly.
         * @param {boolean} [name] Indicates if the product\&#39;s name has changed.
         * @param {boolean} [price] Indicates if the product\&#39;s price has changed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUpdateFromSma(name?: boolean, price?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SmaResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUpdateFromSma(name, price, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MiscApi.postUpdateFromSma']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint allows an admin user to upload files to a specified S3 bucket. It uses multipart form data to handle file uploads and stores them in a temporary S3 directory.
         * @summary Upload files
         * @param {FileType} fileType 
         * @param {File} file Represents the file data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUploadFiles(fileType: FileType, file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUploadFiles(fileType, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MiscApi.postUploadFiles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MiscApi - factory interface
 * @export
 */
export const MiscApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MiscApiFp(configuration)
    return {
        /**
         * This function retrieves a specified file based on the given filename and type, and streams it to the client. It also handles errors related to file access, returning appropriate HTTP status codes for various scenarios such as file not found or other errors.  # Parameters - `filename`: The name of the file to be downloaded. - `params`: The type of the file, which affects the download behavior.  # Responses - `200`: The file is correctly uploaded. - `400`: You\'re missing some field.  # Errors Returns an error if the file does not exist or if there is an issue with the S3 storage.
         * @summary Downloads files from the server\'s storage.
         * @param {string} filename The filename
         * @param {FileType} fileType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFile(filename: string, fileType: FileType, options?: any): AxiosPromise<string> {
            return localVarFp.downloadFile(filename, fileType, options).then((request) => request(axios, basePath));
        },
        /**
         * This asynchronous function handles the `/status` endpoint and returns a static string indicating that the server is running. It is commonly used for health checks to confirm that the application is up and operational.  # Returns A static string `\"UP\"`, representing the server\'s status.  # Endpoint - **GET /status**: Responds with `\"UP\"` and a `200 OK` status.
         * @summary Returns the status of the server.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus(options?: any): AxiosPromise<string> {
            return localVarFp.getStatus(options).then((request) => request(axios, basePath));
        },
        /**
         * # Errors - Returns a 500 status code if there is an internal error, such as a failure to fetch or process Sma data. - Returns a 400 status code if the request to Sma is not correctly formatted.  # Responses - 200: The products have been successfully updated.
         * @summary Updates the local product database by importing products from the Sma API. This function retrieves the latest products from Sma, processes the data, and updates the local products accordingly.
         * @param {boolean} [name] Indicates if the product\&#39;s name has changed.
         * @param {boolean} [price] Indicates if the product\&#39;s price has changed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUpdateFromSma(name?: boolean, price?: boolean, options?: any): AxiosPromise<SmaResponse> {
            return localVarFp.postUpdateFromSma(name, price, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows an admin user to upload files to a specified S3 bucket. It uses multipart form data to handle file uploads and stores them in a temporary S3 directory.
         * @summary Upload files
         * @param {FileType} fileType 
         * @param {File} file Represents the file data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUploadFiles(fileType: FileType, file: File, options?: any): AxiosPromise<string> {
            return localVarFp.postUploadFiles(fileType, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MiscApi - object-oriented interface
 * @export
 * @class MiscApi
 * @extends {BaseAPI}
 */
export class MiscApi extends BaseAPI {
    /**
     * This function retrieves a specified file based on the given filename and type, and streams it to the client. It also handles errors related to file access, returning appropriate HTTP status codes for various scenarios such as file not found or other errors.  # Parameters - `filename`: The name of the file to be downloaded. - `params`: The type of the file, which affects the download behavior.  # Responses - `200`: The file is correctly uploaded. - `400`: You\'re missing some field.  # Errors Returns an error if the file does not exist or if there is an issue with the S3 storage.
     * @summary Downloads files from the server\'s storage.
     * @param {string} filename The filename
     * @param {FileType} fileType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MiscApi
     */
    public downloadFile(filename: string, fileType: FileType, options?: RawAxiosRequestConfig) {
        return MiscApiFp(this.configuration).downloadFile(filename, fileType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This asynchronous function handles the `/status` endpoint and returns a static string indicating that the server is running. It is commonly used for health checks to confirm that the application is up and operational.  # Returns A static string `\"UP\"`, representing the server\'s status.  # Endpoint - **GET /status**: Responds with `\"UP\"` and a `200 OK` status.
     * @summary Returns the status of the server.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MiscApi
     */
    public getStatus(options?: RawAxiosRequestConfig) {
        return MiscApiFp(this.configuration).getStatus(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # Errors - Returns a 500 status code if there is an internal error, such as a failure to fetch or process Sma data. - Returns a 400 status code if the request to Sma is not correctly formatted.  # Responses - 200: The products have been successfully updated.
     * @summary Updates the local product database by importing products from the Sma API. This function retrieves the latest products from Sma, processes the data, and updates the local products accordingly.
     * @param {boolean} [name] Indicates if the product\&#39;s name has changed.
     * @param {boolean} [price] Indicates if the product\&#39;s price has changed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MiscApi
     */
    public postUpdateFromSma(name?: boolean, price?: boolean, options?: RawAxiosRequestConfig) {
        return MiscApiFp(this.configuration).postUpdateFromSma(name, price, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows an admin user to upload files to a specified S3 bucket. It uses multipart form data to handle file uploads and stores them in a temporary S3 directory.
     * @summary Upload files
     * @param {FileType} fileType 
     * @param {File} file Represents the file data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MiscApi
     */
    public postUploadFiles(fileType: FileType, file: File, options?: RawAxiosRequestConfig) {
        return MiscApiFp(this.configuration).postUploadFiles(fileType, file, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductApi - axios parameter creator
 * @export
 */
export const ProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The product is not fully removed but marked as disabled in the database. Only an admin can perform this action.  - **Path Parameters:**   - `id`: The unique ID of the product in the database.  - **Responses:**   - `500`: Internal error, likely related to the database.   - `400`: The request format is invalid.   - `200`: The product has been successfully disabled.
         * @summary Deletes a product by its database ID.
         * @param {string} id Product database id to delete product for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteProduct', 'id', id)
            const localVarPath = `/product/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication axum-oidc required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The admin can change attributes such as the name, price, quantity, or image of the product. If the product image is changed, the old image will be deleted from S3 storage.  Returns an error if the product doesn\'t exist, if there is a validation issue, or if a database or S3 operation fails.
         * @summary Edit an existing product by ID in the store.
         * @param {string} id Product database id to edit product for
         * @param {EditProductRequest} editProductRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editProduct: async (id: string, editProductRequest: EditProductRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('editProduct', 'id', id)
            // verify required parameter 'editProductRequest' is not null or undefined
            assertParamExists('editProduct', 'editProductRequest', editProductRequest)
            const localVarPath = `/product/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication axum-oidc required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editProductRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * - **Query Parameters**:   - `page` (Optional, u64): The page index, default is 0.   - `per_page` (Optional, u64): The number of products per page, default is 20.  - **Response Codes**:   - `200 OK`: Successfully retrieved a list of products.   - `400 Bad Request`: The request is improperly formatted.   - `500 Internal Server Error`: An internal error, most likely related to the database, occurred.  - **Permissions**:   Non-admin users will only see products that are not disabled.
         * @summary Handles the request to retrieve a paginated list of products.
         * @param {number | null} [page] The page number to retrieve, starting from 1.
         * @param {number | null} [perPage] The number of items to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProducts: async (page?: number | null, perPage?: number | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/product`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * - **Path Parameters**:   `id` (UUID): The database ID of the product to retrieve.  - **Response Codes**:   - `200 OK`: The product was successfully retrieved.   - `404 Not Found`: The product doesn\'t exist, or is disabled and the requester is not an admin.   - `400 Bad Request`: The request is improperly formatted.   - `500 Internal Server Error`: An internal error, most likely related to the database, occurred.  - **Permissions**:   If the product is disabled, only an admin can retrieve it.
         * @summary Handles the request to fetch a product by its unique identifier.
         * @param {string} id The database ID of the product to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProduct', 'id', id)
            const localVarPath = `/product/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication axum-oidc required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This function allows an admin to create a new product by sending a POST request to the `/product` endpoint. The new product is validated and stored in the database. The image associated with the product is checked in S3 storage.  - **Admin privileges** are required to access this route. - Returns a `201 Created` status upon successful creation along with the product\'s ID.  Path: `/product`  - **Request Body:** Expects a `NewProduct` JSON object. - **Responses:**     - 500: Internal server error (likely database related).     - 400: Bad request (invalid input data).     - 201: Successfully created a new product, returns the new product\'s ID as a string.
         * @summary Handler for creating a new product.
         * @param {NewProductRequest} newProductRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNewProduct: async (newProductRequest: NewProductRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'newProductRequest' is not null or undefined
            assertParamExists('postNewProduct', 'newProductRequest', newProductRequest)
            const localVarPath = `/product`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newProductRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductApiAxiosParamCreator(configuration)
    return {
        /**
         * The product is not fully removed but marked as disabled in the database. Only an admin can perform this action.  - **Path Parameters:**   - `id`: The unique ID of the product in the database.  - **Responses:**   - `500`: Internal error, likely related to the database.   - `400`: The request format is invalid.   - `200`: The product has been successfully disabled.
         * @summary Deletes a product by its database ID.
         * @param {string} id Product database id to delete product for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProduct(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProduct(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductApi.deleteProduct']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * The admin can change attributes such as the name, price, quantity, or image of the product. If the product image is changed, the old image will be deleted from S3 storage.  Returns an error if the product doesn\'t exist, if there is a validation issue, or if a database or S3 operation fails.
         * @summary Edit an existing product by ID in the store.
         * @param {string} id Product database id to edit product for
         * @param {EditProductRequest} editProductRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editProduct(id: string, editProductRequest: EditProductRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editProduct(id, editProductRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductApi.editProduct']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * - **Query Parameters**:   - `page` (Optional, u64): The page index, default is 0.   - `per_page` (Optional, u64): The number of products per page, default is 20.  - **Response Codes**:   - `200 OK`: Successfully retrieved a list of products.   - `400 Bad Request`: The request is improperly formatted.   - `500 Internal Server Error`: An internal error, most likely related to the database, occurred.  - **Permissions**:   Non-admin users will only see products that are not disabled.
         * @summary Handles the request to retrieve a paginated list of products.
         * @param {number | null} [page] The page number to retrieve, starting from 1.
         * @param {number | null} [perPage] The number of items to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllProducts(page?: number | null, perPage?: number | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllProducts(page, perPage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductApi.getAllProducts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * - **Path Parameters**:   `id` (UUID): The database ID of the product to retrieve.  - **Response Codes**:   - `200 OK`: The product was successfully retrieved.   - `404 Not Found`: The product doesn\'t exist, or is disabled and the requester is not an admin.   - `400 Bad Request`: The request is improperly formatted.   - `500 Internal Server Error`: An internal error, most likely related to the database, occurred.  - **Permissions**:   If the product is disabled, only an admin can retrieve it.
         * @summary Handles the request to fetch a product by its unique identifier.
         * @param {string} id The database ID of the product to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProduct(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProduct(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductApi.getProduct']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This function allows an admin to create a new product by sending a POST request to the `/product` endpoint. The new product is validated and stored in the database. The image associated with the product is checked in S3 storage.  - **Admin privileges** are required to access this route. - Returns a `201 Created` status upon successful creation along with the product\'s ID.  Path: `/product`  - **Request Body:** Expects a `NewProduct` JSON object. - **Responses:**     - 500: Internal server error (likely database related).     - 400: Bad request (invalid input data).     - 201: Successfully created a new product, returns the new product\'s ID as a string.
         * @summary Handler for creating a new product.
         * @param {NewProductRequest} newProductRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postNewProduct(newProductRequest: NewProductRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postNewProduct(newProductRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductApi.postNewProduct']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductApiFp(configuration)
    return {
        /**
         * The product is not fully removed but marked as disabled in the database. Only an admin can perform this action.  - **Path Parameters:**   - `id`: The unique ID of the product in the database.  - **Responses:**   - `500`: Internal error, likely related to the database.   - `400`: The request format is invalid.   - `200`: The product has been successfully disabled.
         * @summary Deletes a product by its database ID.
         * @param {string} id Product database id to delete product for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteProduct(id, options).then((request) => request(axios, basePath));
        },
        /**
         * The admin can change attributes such as the name, price, quantity, or image of the product. If the product image is changed, the old image will be deleted from S3 storage.  Returns an error if the product doesn\'t exist, if there is a validation issue, or if a database or S3 operation fails.
         * @summary Edit an existing product by ID in the store.
         * @param {string} id Product database id to edit product for
         * @param {EditProductRequest} editProductRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editProduct(id: string, editProductRequest: EditProductRequest, options?: any): AxiosPromise<void> {
            return localVarFp.editProduct(id, editProductRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * - **Query Parameters**:   - `page` (Optional, u64): The page index, default is 0.   - `per_page` (Optional, u64): The number of products per page, default is 20.  - **Response Codes**:   - `200 OK`: Successfully retrieved a list of products.   - `400 Bad Request`: The request is improperly formatted.   - `500 Internal Server Error`: An internal error, most likely related to the database, occurred.  - **Permissions**:   Non-admin users will only see products that are not disabled.
         * @summary Handles the request to retrieve a paginated list of products.
         * @param {number | null} [page] The page number to retrieve, starting from 1.
         * @param {number | null} [perPage] The number of items to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProducts(page?: number | null, perPage?: number | null, options?: any): AxiosPromise<ProductListResponse> {
            return localVarFp.getAllProducts(page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * - **Path Parameters**:   `id` (UUID): The database ID of the product to retrieve.  - **Response Codes**:   - `200 OK`: The product was successfully retrieved.   - `404 Not Found`: The product doesn\'t exist, or is disabled and the requester is not an admin.   - `400 Bad Request`: The request is improperly formatted.   - `500 Internal Server Error`: An internal error, most likely related to the database, occurred.  - **Permissions**:   If the product is disabled, only an admin can retrieve it.
         * @summary Handles the request to fetch a product by its unique identifier.
         * @param {string} id The database ID of the product to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct(id: string, options?: any): AxiosPromise<ProductResponse> {
            return localVarFp.getProduct(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This function allows an admin to create a new product by sending a POST request to the `/product` endpoint. The new product is validated and stored in the database. The image associated with the product is checked in S3 storage.  - **Admin privileges** are required to access this route. - Returns a `201 Created` status upon successful creation along with the product\'s ID.  Path: `/product`  - **Request Body:** Expects a `NewProduct` JSON object. - **Responses:**     - 500: Internal server error (likely database related).     - 400: Bad request (invalid input data).     - 201: Successfully created a new product, returns the new product\'s ID as a string.
         * @summary Handler for creating a new product.
         * @param {NewProductRequest} newProductRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNewProduct(newProductRequest: NewProductRequest, options?: any): AxiosPromise<string> {
            return localVarFp.postNewProduct(newProductRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export class ProductApi extends BaseAPI {
    /**
     * The product is not fully removed but marked as disabled in the database. Only an admin can perform this action.  - **Path Parameters:**   - `id`: The unique ID of the product in the database.  - **Responses:**   - `500`: Internal error, likely related to the database.   - `400`: The request format is invalid.   - `200`: The product has been successfully disabled.
     * @summary Deletes a product by its database ID.
     * @param {string} id Product database id to delete product for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public deleteProduct(id: string, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).deleteProduct(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The admin can change attributes such as the name, price, quantity, or image of the product. If the product image is changed, the old image will be deleted from S3 storage.  Returns an error if the product doesn\'t exist, if there is a validation issue, or if a database or S3 operation fails.
     * @summary Edit an existing product by ID in the store.
     * @param {string} id Product database id to edit product for
     * @param {EditProductRequest} editProductRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public editProduct(id: string, editProductRequest: EditProductRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).editProduct(id, editProductRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * - **Query Parameters**:   - `page` (Optional, u64): The page index, default is 0.   - `per_page` (Optional, u64): The number of products per page, default is 20.  - **Response Codes**:   - `200 OK`: Successfully retrieved a list of products.   - `400 Bad Request`: The request is improperly formatted.   - `500 Internal Server Error`: An internal error, most likely related to the database, occurred.  - **Permissions**:   Non-admin users will only see products that are not disabled.
     * @summary Handles the request to retrieve a paginated list of products.
     * @param {number | null} [page] The page number to retrieve, starting from 1.
     * @param {number | null} [perPage] The number of items to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getAllProducts(page?: number | null, perPage?: number | null, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).getAllProducts(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * - **Path Parameters**:   `id` (UUID): The database ID of the product to retrieve.  - **Response Codes**:   - `200 OK`: The product was successfully retrieved.   - `404 Not Found`: The product doesn\'t exist, or is disabled and the requester is not an admin.   - `400 Bad Request`: The request is improperly formatted.   - `500 Internal Server Error`: An internal error, most likely related to the database, occurred.  - **Permissions**:   If the product is disabled, only an admin can retrieve it.
     * @summary Handles the request to fetch a product by its unique identifier.
     * @param {string} id The database ID of the product to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getProduct(id: string, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).getProduct(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This function allows an admin to create a new product by sending a POST request to the `/product` endpoint. The new product is validated and stored in the database. The image associated with the product is checked in S3 storage.  - **Admin privileges** are required to access this route. - Returns a `201 Created` status upon successful creation along with the product\'s ID.  Path: `/product`  - **Request Body:** Expects a `NewProduct` JSON object. - **Responses:**     - 500: Internal server error (likely database related).     - 400: Bad request (invalid input data).     - 201: Successfully created a new product, returns the new product\'s ID as a string.
     * @summary Handler for creating a new product.
     * @param {NewProductRequest} newProductRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public postNewProduct(newProductRequest: NewProductRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).postNewProduct(newProductRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RefillApi - axios parameter creator
 * @export
 */
export const RefillApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The refill is not fully removed but marked as disabled in the database. Only an admin can perform this action.  - **Path Parameters:**   - `id`: The unique ID of the refill in the database.  - **Responses:**   - `500`: Internal error, likely related to the database.   - `400`: The request format is invalid.   - `200`: The refill has been successfully disabled.
         * @summary Deletes a refill by its database ID.
         * @param {string} id refill database id to delete refill for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRefill: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRefill', 'id', id)
            const localVarPath = `/refill/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication axum-oidc required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The admin can change attributes such as the name, amont_in_euro, amont_in_epicoin of the refill.  Returns an error if the refill doesn\'t exist, if there is a validation issue, or if a database or S3 operation fails.
         * @summary Edit an existing refill by ID in the store.
         * @param {string} id refill database id to edit refill for
         * @param {EditRefillRequest} editRefillRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editRefill: async (id: string, editRefillRequest: EditRefillRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('editRefill', 'id', id)
            // verify required parameter 'editRefillRequest' is not null or undefined
            assertParamExists('editRefill', 'editRefillRequest', editRefillRequest)
            const localVarPath = `/refill/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication axum-oidc required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editRefillRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * - **Query Parameters**:   - `page` (Optional, u64): The page index, default is 0.   - `per_page` (Optional, u64): The number of refill per page, default is 20.  - **Response Codes**:   - `200 OK`: Successfully retrieved a list of refills.   - `400 Bad Request`: The request is improperly formatted.   - `500 Internal Server Error`: An internal error, most likely related to the database, occurred.  - **Permissions**:   Only Admin can view disabled refill
         * @summary Handles the request to retrieve a paginated list of refills.
         * @param {number | null} [page] The page number to retrieve, starting from 1.
         * @param {number | null} [perPage] The number of items to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRefills: async (page?: number | null, perPage?: number | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/refill`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication axum-oidc required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * - **Path Parameters**:   `id` (UUID): The database ID of the refill to retrieve.  - **Response Codes**:   - `200 OK`: The refill was successfully retrieved.   - `404 Not Found`: The refill doesn\'t exist.   - `400 Bad Request`: The request is improperly formatted.   - `500 Internal Server Error`: An internal error, most likely related to the database, occurred.  - **Permissions**:   If the refill is disabled, only an admin can retrieve it.
         * @summary Handles the request to fetch a refill by its unique identifier.
         * @param {string} id The database ID of the refill to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRefill: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRefill', 'id', id)
            const localVarPath = `/refill/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication axum-oidc required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This function allows an admin to create a new refill by sending a POST request to the `/refill` endpoint. The new refill is validated and stored in the database. The image associated with the refill is checked in S3 storage.  - **Admin privileges** are required to access this route. - Returns a `201 Created` status upon successful creation along with the refill\'s ID.  Path: `/refill`  - **Request Body:** Expects a `NewRefill` JSON object. - **Responses:**     - 500: Internal server error (likely database related).     - 400: Bad request (invalid input data).     - 201: Successfully created a new refill, returns the new refill\'s ID as a string.
         * @summary Handler for creating a new refill.
         * @param {NewRefillRequest} newRefillRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNewRefill: async (newRefillRequest: NewRefillRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'newRefillRequest' is not null or undefined
            assertParamExists('postNewRefill', 'newRefillRequest', newRefillRequest)
            const localVarPath = `/refill`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication axum-oidc required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newRefillRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RefillApi - functional programming interface
 * @export
 */
export const RefillApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RefillApiAxiosParamCreator(configuration)
    return {
        /**
         * The refill is not fully removed but marked as disabled in the database. Only an admin can perform this action.  - **Path Parameters:**   - `id`: The unique ID of the refill in the database.  - **Responses:**   - `500`: Internal error, likely related to the database.   - `400`: The request format is invalid.   - `200`: The refill has been successfully disabled.
         * @summary Deletes a refill by its database ID.
         * @param {string} id refill database id to delete refill for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRefill(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRefill(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RefillApi.deleteRefill']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * The admin can change attributes such as the name, amont_in_euro, amont_in_epicoin of the refill.  Returns an error if the refill doesn\'t exist, if there is a validation issue, or if a database or S3 operation fails.
         * @summary Edit an existing refill by ID in the store.
         * @param {string} id refill database id to edit refill for
         * @param {EditRefillRequest} editRefillRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editRefill(id: string, editRefillRequest: EditRefillRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editRefill(id, editRefillRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RefillApi.editRefill']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * - **Query Parameters**:   - `page` (Optional, u64): The page index, default is 0.   - `per_page` (Optional, u64): The number of refill per page, default is 20.  - **Response Codes**:   - `200 OK`: Successfully retrieved a list of refills.   - `400 Bad Request`: The request is improperly formatted.   - `500 Internal Server Error`: An internal error, most likely related to the database, occurred.  - **Permissions**:   Only Admin can view disabled refill
         * @summary Handles the request to retrieve a paginated list of refills.
         * @param {number | null} [page] The page number to retrieve, starting from 1.
         * @param {number | null} [perPage] The number of items to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllRefills(page?: number | null, perPage?: number | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefillListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllRefills(page, perPage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RefillApi.getAllRefills']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * - **Path Parameters**:   `id` (UUID): The database ID of the refill to retrieve.  - **Response Codes**:   - `200 OK`: The refill was successfully retrieved.   - `404 Not Found`: The refill doesn\'t exist.   - `400 Bad Request`: The request is improperly formatted.   - `500 Internal Server Error`: An internal error, most likely related to the database, occurred.  - **Permissions**:   If the refill is disabled, only an admin can retrieve it.
         * @summary Handles the request to fetch a refill by its unique identifier.
         * @param {string} id The database ID of the refill to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRefill(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefillResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRefill(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RefillApi.getRefill']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This function allows an admin to create a new refill by sending a POST request to the `/refill` endpoint. The new refill is validated and stored in the database. The image associated with the refill is checked in S3 storage.  - **Admin privileges** are required to access this route. - Returns a `201 Created` status upon successful creation along with the refill\'s ID.  Path: `/refill`  - **Request Body:** Expects a `NewRefill` JSON object. - **Responses:**     - 500: Internal server error (likely database related).     - 400: Bad request (invalid input data).     - 201: Successfully created a new refill, returns the new refill\'s ID as a string.
         * @summary Handler for creating a new refill.
         * @param {NewRefillRequest} newRefillRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postNewRefill(newRefillRequest: NewRefillRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postNewRefill(newRefillRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RefillApi.postNewRefill']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RefillApi - factory interface
 * @export
 */
export const RefillApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RefillApiFp(configuration)
    return {
        /**
         * The refill is not fully removed but marked as disabled in the database. Only an admin can perform this action.  - **Path Parameters:**   - `id`: The unique ID of the refill in the database.  - **Responses:**   - `500`: Internal error, likely related to the database.   - `400`: The request format is invalid.   - `200`: The refill has been successfully disabled.
         * @summary Deletes a refill by its database ID.
         * @param {string} id refill database id to delete refill for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRefill(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRefill(id, options).then((request) => request(axios, basePath));
        },
        /**
         * The admin can change attributes such as the name, amont_in_euro, amont_in_epicoin of the refill.  Returns an error if the refill doesn\'t exist, if there is a validation issue, or if a database or S3 operation fails.
         * @summary Edit an existing refill by ID in the store.
         * @param {string} id refill database id to edit refill for
         * @param {EditRefillRequest} editRefillRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editRefill(id: string, editRefillRequest: EditRefillRequest, options?: any): AxiosPromise<void> {
            return localVarFp.editRefill(id, editRefillRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * - **Query Parameters**:   - `page` (Optional, u64): The page index, default is 0.   - `per_page` (Optional, u64): The number of refill per page, default is 20.  - **Response Codes**:   - `200 OK`: Successfully retrieved a list of refills.   - `400 Bad Request`: The request is improperly formatted.   - `500 Internal Server Error`: An internal error, most likely related to the database, occurred.  - **Permissions**:   Only Admin can view disabled refill
         * @summary Handles the request to retrieve a paginated list of refills.
         * @param {number | null} [page] The page number to retrieve, starting from 1.
         * @param {number | null} [perPage] The number of items to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRefills(page?: number | null, perPage?: number | null, options?: any): AxiosPromise<RefillListResponse> {
            return localVarFp.getAllRefills(page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * - **Path Parameters**:   `id` (UUID): The database ID of the refill to retrieve.  - **Response Codes**:   - `200 OK`: The refill was successfully retrieved.   - `404 Not Found`: The refill doesn\'t exist.   - `400 Bad Request`: The request is improperly formatted.   - `500 Internal Server Error`: An internal error, most likely related to the database, occurred.  - **Permissions**:   If the refill is disabled, only an admin can retrieve it.
         * @summary Handles the request to fetch a refill by its unique identifier.
         * @param {string} id The database ID of the refill to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRefill(id: string, options?: any): AxiosPromise<RefillResponse> {
            return localVarFp.getRefill(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This function allows an admin to create a new refill by sending a POST request to the `/refill` endpoint. The new refill is validated and stored in the database. The image associated with the refill is checked in S3 storage.  - **Admin privileges** are required to access this route. - Returns a `201 Created` status upon successful creation along with the refill\'s ID.  Path: `/refill`  - **Request Body:** Expects a `NewRefill` JSON object. - **Responses:**     - 500: Internal server error (likely database related).     - 400: Bad request (invalid input data).     - 201: Successfully created a new refill, returns the new refill\'s ID as a string.
         * @summary Handler for creating a new refill.
         * @param {NewRefillRequest} newRefillRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNewRefill(newRefillRequest: NewRefillRequest, options?: any): AxiosPromise<string> {
            return localVarFp.postNewRefill(newRefillRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RefillApi - object-oriented interface
 * @export
 * @class RefillApi
 * @extends {BaseAPI}
 */
export class RefillApi extends BaseAPI {
    /**
     * The refill is not fully removed but marked as disabled in the database. Only an admin can perform this action.  - **Path Parameters:**   - `id`: The unique ID of the refill in the database.  - **Responses:**   - `500`: Internal error, likely related to the database.   - `400`: The request format is invalid.   - `200`: The refill has been successfully disabled.
     * @summary Deletes a refill by its database ID.
     * @param {string} id refill database id to delete refill for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefillApi
     */
    public deleteRefill(id: string, options?: RawAxiosRequestConfig) {
        return RefillApiFp(this.configuration).deleteRefill(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The admin can change attributes such as the name, amont_in_euro, amont_in_epicoin of the refill.  Returns an error if the refill doesn\'t exist, if there is a validation issue, or if a database or S3 operation fails.
     * @summary Edit an existing refill by ID in the store.
     * @param {string} id refill database id to edit refill for
     * @param {EditRefillRequest} editRefillRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefillApi
     */
    public editRefill(id: string, editRefillRequest: EditRefillRequest, options?: RawAxiosRequestConfig) {
        return RefillApiFp(this.configuration).editRefill(id, editRefillRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * - **Query Parameters**:   - `page` (Optional, u64): The page index, default is 0.   - `per_page` (Optional, u64): The number of refill per page, default is 20.  - **Response Codes**:   - `200 OK`: Successfully retrieved a list of refills.   - `400 Bad Request`: The request is improperly formatted.   - `500 Internal Server Error`: An internal error, most likely related to the database, occurred.  - **Permissions**:   Only Admin can view disabled refill
     * @summary Handles the request to retrieve a paginated list of refills.
     * @param {number | null} [page] The page number to retrieve, starting from 1.
     * @param {number | null} [perPage] The number of items to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefillApi
     */
    public getAllRefills(page?: number | null, perPage?: number | null, options?: RawAxiosRequestConfig) {
        return RefillApiFp(this.configuration).getAllRefills(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * - **Path Parameters**:   `id` (UUID): The database ID of the refill to retrieve.  - **Response Codes**:   - `200 OK`: The refill was successfully retrieved.   - `404 Not Found`: The refill doesn\'t exist.   - `400 Bad Request`: The request is improperly formatted.   - `500 Internal Server Error`: An internal error, most likely related to the database, occurred.  - **Permissions**:   If the refill is disabled, only an admin can retrieve it.
     * @summary Handles the request to fetch a refill by its unique identifier.
     * @param {string} id The database ID of the refill to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefillApi
     */
    public getRefill(id: string, options?: RawAxiosRequestConfig) {
        return RefillApiFp(this.configuration).getRefill(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This function allows an admin to create a new refill by sending a POST request to the `/refill` endpoint. The new refill is validated and stored in the database. The image associated with the refill is checked in S3 storage.  - **Admin privileges** are required to access this route. - Returns a `201 Created` status upon successful creation along with the refill\'s ID.  Path: `/refill`  - **Request Body:** Expects a `NewRefill` JSON object. - **Responses:**     - 500: Internal server error (likely database related).     - 400: Bad request (invalid input data).     - 201: Successfully created a new refill, returns the new refill\'s ID as a string.
     * @summary Handler for creating a new refill.
     * @param {NewRefillRequest} newRefillRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefillApi
     */
    public postNewRefill(newRefillRequest: NewRefillRequest, options?: RawAxiosRequestConfig) {
        return RefillApiFp(this.configuration).postNewRefill(newRefillRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an error if the user doesn\'t exist, if there is a validation issue, or if a database.
         * @summary Edit an existing user by ID.
         * @param {string} id user database id to edit user for
         * @param {EditUserRequest} editUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUser: async (id: string, editUserRequest: EditUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('editUser', 'id', id)
            // verify required parameter 'editUserRequest' is not null or undefined
            assertParamExists('editUser', 'editUserRequest', editUserRequest)
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication axum-oidc required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * - **Query Parameters**:   - `page` (Optional, u64): The page index, default is 0.   - `per_page` (Optional, u64): The number of user per page, default is 20.  - **Response Codes**:   - `200 OK`: Successfully retrieved a list of users.   - `400 Bad Request`: The request is improperly formatted.   - `500 Internal Server Error`: An internal error, most likely related to the database, occurred.  - **Permissions**:   Only Admin can view others users
         * @summary Handles the request to retrieve a paginated list of users.
         * @param {number | null} [page] The page number to retrieve, starting from 1.
         * @param {number | null} [perPage] The number of items to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers: async (page?: number | null, perPage?: number | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication axum-oidc required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This function is responsible for handling login requests. When a user attempts to access the login route, they are redirected to the frontend base URL specified in the application\'s configuration (command-line arguments or environment variables).  
         * @summary Handles the login route by redirecting the user to the frontend.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogin: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This function manages user logout by initiating an OIDC provider-initiated logout and then redirecting the user to the frontend base URL.
         * @summary Handles the logout process by initiating a logout request with the OIDC provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogout: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication axum-oidc required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This function checks if a user is authenticated using the optional `User`. If the user is logged in, their information (ID, username, email, etc...) is returned as a JSON response. If not logged in, it returns a `204 No Content` response, indicating the user is not authenticated.
         * @summary Handles the `/me` route, returning the current user\'s information if authenticated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMe: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication axum-oidc required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * - **Path Parameters**:   `id` (UUID): The database ID of the user to retrieve.  - **Response Codes**:   - `200 OK`: The user was successfully retrieved.   - `404 Not Found`: The user doesn\'t exist.   - `400 Bad Request`: The request is improperly formatted.   - `500 Internal Server Error`: An internal error, most likely related to the database, occurred.  - **Permissions**:   If the user is disabled, only an admin can retrieve it.
         * @summary Handles the request to fetch a user by its unique identifier.
         * @param {string} id The database ID of the user to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUser', 'id', id)
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication axum-oidc required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an error if the user doesn\'t exist, if there is a validation issue, or if a database.
         * @summary Edit an existing user by ID.
         * @param {string} id user database id to edit user for
         * @param {EditUserRequest} editUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editUser(id: string, editUserRequest: EditUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editUser(id, editUserRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.editUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * - **Query Parameters**:   - `page` (Optional, u64): The page index, default is 0.   - `per_page` (Optional, u64): The number of user per page, default is 20.  - **Response Codes**:   - `200 OK`: Successfully retrieved a list of users.   - `400 Bad Request`: The request is improperly formatted.   - `500 Internal Server Error`: An internal error, most likely related to the database, occurred.  - **Permissions**:   Only Admin can view others users
         * @summary Handles the request to retrieve a paginated list of users.
         * @param {number | null} [page] The page number to retrieve, starting from 1.
         * @param {number | null} [perPage] The number of items to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUsers(page?: number | null, perPage?: number | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUsers(page, perPage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getAllUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This function is responsible for handling login requests. When a user attempts to access the login route, they are redirected to the frontend base URL specified in the application\'s configuration (command-line arguments or environment variables).  
         * @summary Handles the login route by redirecting the user to the frontend.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLogin(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLogin(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This function manages user logout by initiating an OIDC provider-initiated logout and then redirecting the user to the frontend base URL.
         * @summary Handles the logout process by initiating a logout request with the OIDC provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLogout(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLogout(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getLogout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This function checks if a user is authenticated using the optional `User`. If the user is logged in, their information (ID, username, email, etc...) is returned as a JSON response. If not logged in, it returns a `204 No Content` response, indicating the user is not authenticated.
         * @summary Handles the `/me` route, returning the current user\'s information if authenticated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMe(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMe(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getMe']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * - **Path Parameters**:   `id` (UUID): The database ID of the user to retrieve.  - **Response Codes**:   - `200 OK`: The user was successfully retrieved.   - `404 Not Found`: The user doesn\'t exist.   - `400 Bad Request`: The request is improperly formatted.   - `500 Internal Server Error`: An internal error, most likely related to the database, occurred.  - **Permissions**:   If the user is disabled, only an admin can retrieve it.
         * @summary Handles the request to fetch a user by its unique identifier.
         * @param {string} id The database ID of the user to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * Returns an error if the user doesn\'t exist, if there is a validation issue, or if a database.
         * @summary Edit an existing user by ID.
         * @param {string} id user database id to edit user for
         * @param {EditUserRequest} editUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUser(id: string, editUserRequest: EditUserRequest, options?: any): AxiosPromise<void> {
            return localVarFp.editUser(id, editUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * - **Query Parameters**:   - `page` (Optional, u64): The page index, default is 0.   - `per_page` (Optional, u64): The number of user per page, default is 20.  - **Response Codes**:   - `200 OK`: Successfully retrieved a list of users.   - `400 Bad Request`: The request is improperly formatted.   - `500 Internal Server Error`: An internal error, most likely related to the database, occurred.  - **Permissions**:   Only Admin can view others users
         * @summary Handles the request to retrieve a paginated list of users.
         * @param {number | null} [page] The page number to retrieve, starting from 1.
         * @param {number | null} [perPage] The number of items to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers(page?: number | null, perPage?: number | null, options?: any): AxiosPromise<UserListResponse> {
            return localVarFp.getAllUsers(page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * This function is responsible for handling login requests. When a user attempts to access the login route, they are redirected to the frontend base URL specified in the application\'s configuration (command-line arguments or environment variables).  
         * @summary Handles the login route by redirecting the user to the frontend.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogin(options?: any): AxiosPromise<void> {
            return localVarFp.getLogin(options).then((request) => request(axios, basePath));
        },
        /**
         * This function manages user logout by initiating an OIDC provider-initiated logout and then redirecting the user to the frontend base URL.
         * @summary Handles the logout process by initiating a logout request with the OIDC provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogout(options?: any): AxiosPromise<void> {
            return localVarFp.getLogout(options).then((request) => request(axios, basePath));
        },
        /**
         * This function checks if a user is authenticated using the optional `User`. If the user is logged in, their information (ID, username, email, etc...) is returned as a JSON response. If not logged in, it returns a `204 No Content` response, indicating the user is not authenticated.
         * @summary Handles the `/me` route, returning the current user\'s information if authenticated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMe(options?: any): AxiosPromise<UserResponse> {
            return localVarFp.getMe(options).then((request) => request(axios, basePath));
        },
        /**
         * - **Path Parameters**:   `id` (UUID): The database ID of the user to retrieve.  - **Response Codes**:   - `200 OK`: The user was successfully retrieved.   - `404 Not Found`: The user doesn\'t exist.   - `400 Bad Request`: The request is improperly formatted.   - `500 Internal Server Error`: An internal error, most likely related to the database, occurred.  - **Permissions**:   If the user is disabled, only an admin can retrieve it.
         * @summary Handles the request to fetch a user by its unique identifier.
         * @param {string} id The database ID of the user to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(id: string, options?: any): AxiosPromise<UserResponse> {
            return localVarFp.getUser(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * Returns an error if the user doesn\'t exist, if there is a validation issue, or if a database.
     * @summary Edit an existing user by ID.
     * @param {string} id user database id to edit user for
     * @param {EditUserRequest} editUserRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public editUser(id: string, editUserRequest: EditUserRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).editUser(id, editUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * - **Query Parameters**:   - `page` (Optional, u64): The page index, default is 0.   - `per_page` (Optional, u64): The number of user per page, default is 20.  - **Response Codes**:   - `200 OK`: Successfully retrieved a list of users.   - `400 Bad Request`: The request is improperly formatted.   - `500 Internal Server Error`: An internal error, most likely related to the database, occurred.  - **Permissions**:   Only Admin can view others users
     * @summary Handles the request to retrieve a paginated list of users.
     * @param {number | null} [page] The page number to retrieve, starting from 1.
     * @param {number | null} [perPage] The number of items to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getAllUsers(page?: number | null, perPage?: number | null, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getAllUsers(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This function is responsible for handling login requests. When a user attempts to access the login route, they are redirected to the frontend base URL specified in the application\'s configuration (command-line arguments or environment variables).  
     * @summary Handles the login route by redirecting the user to the frontend.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getLogin(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getLogin(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This function manages user logout by initiating an OIDC provider-initiated logout and then redirecting the user to the frontend base URL.
     * @summary Handles the logout process by initiating a logout request with the OIDC provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getLogout(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getLogout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This function checks if a user is authenticated using the optional `User`. If the user is logged in, their information (ID, username, email, etc...) is returned as a JSON response. If not logged in, it returns a `204 No Content` response, indicating the user is not authenticated.
     * @summary Handles the `/me` route, returning the current user\'s information if authenticated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getMe(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getMe(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * - **Path Parameters**:   `id` (UUID): The database ID of the user to retrieve.  - **Response Codes**:   - `200 OK`: The user was successfully retrieved.   - `404 Not Found`: The user doesn\'t exist.   - `400 Bad Request`: The request is improperly formatted.   - `500 Internal Server Error`: An internal error, most likely related to the database, occurred.  - **Permissions**:   If the user is disabled, only an admin can retrieve it.
     * @summary Handles the request to fetch a user by its unique identifier.
     * @param {string} id The database ID of the user to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUser(id: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getUser(id, options).then((request) => request(this.axios, this.basePath));
    }
}



